import numpy as np
import matplotlib.pyplot as plt

iterationsList = []

class Merge_Sort():
    def __init__(self):
        self.iterations = 0

    def mergeSort_list(self, left, right):
        i = j = 0
        final_array = []

        while i < len(left) and j < len(right):

            if left[i] < right[j]:
                final_array.append(left[i])
                i += 1
            else:
                final_array.append(right[j])
                j += 1

            self.iterations += 1

        final_array.extend(left[i:])
        final_array.extend(right[j:])

        return final_array

    def mergeSort_div(self, array):

        length = len(array)
        self.iterations += 1

        if length <= 1:
            return array

        mid_Index = length // 2

        left_array = self.mergeSort_div(array[:mid_Index])
        right_array = self.mergeSort_div(array[mid_Index:])

        return self.mergeSort_list(left_array, right_array)

for i in range(1,201):
    list1 = np.random.randint(1000, size=(i))
    x = Merge_Sort()
    Sorted = x.mergeSort_div(list1)
    iterationsList.append(x.iterations)

yAxis = list(range(1, 201))

print("Y Axis :: ")
print(yAxis)

print("Corresponding Iterations for Merge Sort")
print(iterationsList)

plt.scatter(iterationsList, yAxis)
plt.plot(yAxis*np.log2(yAxis)/np.log2(1.88), yAxis, color="red", label="O(n*logn)")
plt.title("MERGE SORT")
plt.xlabel("Iterations")
plt.legend()
plt.ylabel("Array")
plt.show()