
class Graph:
    def __init__(self, nodes):
        self.m_nodes = nodes
        self.m_graph = []

    def add_edge(self, node1, node2, weight):
        self.m_graph.append([node1, node2, weight])

    # Finding root node of subtree
    def find_subtree(self, parent, i):
        if parent[i] == i:
            return i
        return self.find_subtree(parent, parent[i])

    # Connects subtrees with nodes `x` and `y`
    def connect_subtrees(self, parent, subtree_size, x, y):

        xroot = self.find_subtree(parent, x)
        yroot = self.find_subtree(parent, y)

        if subtree_size[xroot] < subtree_size[yroot]:
            parent[xroot] = yroot

        elif subtree_size[xroot] > subtree_size[yroot]:
            parent[yroot] = xroot

        else:
            parent[yroot] = xroot
            subtree_size[xroot] += 1

    def kruskals_mst(self):

        result = []
        i = 0
        edges = 0

        self.m_graph = sorted(self.m_graph, key=lambda item: item[2])

        parent = []
        subtree_size = []

        for node in range(self.m_nodes):
            parent.append(node)
            subtree_size.append(0)

        # PROPERTY OF MST :: No of edges = (No. of nodes -1)

        while edges < (self.m_nodes - 1):

            node1, node2, weight = self.m_graph[i]
            i = i + 1

            x = self.find_subtree(parent, node1)
            y = self.find_subtree(parent, node2)

            if x != y:

                edges = edges + 1
                result.append([node1, node2, weight])
                self.connect_subtrees(parent, subtree_size, x, y)

        minimumCost = 0

        print("\nEDGE'S IN MINIMUM SPANNING TREE ::\n")

        for node1, node2, weight in result:
            minimumCost += weight
            print("%d ----- %d (Weight = %d)" % (node1, node2, weight))

        print("\n--> COST OF MINIMUM SPANNING TREE : ", minimumCost)

g = Graph(6)

g.add_edge(0, 1, 4)
g.add_edge(0, 2, 4)

g.add_edge(1, 2, 2)
g.add_edge(1, 0, 4)

g.add_edge(2, 0, 4)
g.add_edge(2, 1, 2)
g.add_edge(2, 3, 3)
g.add_edge(2, 5, 2)
g.add_edge(2, 4, 4)

g.add_edge(3, 2, 3)
g.add_edge(3, 4, 3)

g.add_edge(4, 2, 4)
g.add_edge(4, 3, 3)

g.add_edge(5, 2, 2)
g.add_edge(5, 4, 3)

g.kruskals_mst()
